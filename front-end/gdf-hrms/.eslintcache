[{"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\index.js":"1","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\App.js":"2","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Layout.js":"3","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\searchpage.js":"4","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileLayout.js":"5","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryLayout.js":"6","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchByOtherCriteriaForm.js":"7","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchByRegimentNumberForm.js":"8","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchResultsTable.js":"9","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\PersonalInformationForm.js":"10","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\AddressForm.js":"11","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\ContactForm.js":"12","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\OfficialInformationForm.js":"13","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\CareerHistoryTable.js":"14","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\CareerHistoryForm.js":"15","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeInformation.js":"16","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeAddressForm.js":"17","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeContactForm.js":"18","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeOfficialInfoForm.js":"19","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeePIForm.js":"20","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\axios.js":"21","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Home.js":"22","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\ViewCareerHistory.js":"23","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeInformation.js":"24","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\axios.js":"25","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeePIForm.js":"26","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeeContactForm.js":"27","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeeOfficialInfoForm.js":"28","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Notification.js":"29","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Controls\\DialogComponent.js":"30","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Controls\\FormComponent.js":"31","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Notification.js":"32"},{"size":957,"mtime":1620434703274,"results":"33","hashOfConfig":"34"},{"size":1877,"mtime":1619885724421,"results":"35","hashOfConfig":"34"},{"size":6064,"mtime":1617674050855,"results":"36","hashOfConfig":"34"},{"size":2826,"mtime":1620655907875,"results":"37","hashOfConfig":"34"},{"size":21086,"mtime":1620701206487,"results":"38","hashOfConfig":"34"},{"size":1938,"mtime":1619191314019,"results":"39","hashOfConfig":"34"},{"size":3884,"mtime":1620440760411,"results":"40","hashOfConfig":"34"},{"size":2020,"mtime":1620651777997,"results":"41","hashOfConfig":"34"},{"size":3937,"mtime":1619885724520,"results":"42","hashOfConfig":"34"},{"size":3230,"mtime":1619542059427,"results":"43","hashOfConfig":"34"},{"size":3698,"mtime":1620701206205,"results":"44","hashOfConfig":"34"},{"size":1838,"mtime":1620701206239,"results":"45","hashOfConfig":"34"},{"size":2089,"mtime":1620701206246,"results":"46","hashOfConfig":"34"},{"size":12484,"mtime":1620701206076,"results":"47","hashOfConfig":"34"},{"size":2830,"mtime":1620393974159,"results":"48","hashOfConfig":"34"},{"size":9001,"mtime":1620701874363,"results":"49","hashOfConfig":"34"},{"size":7197,"mtime":1620695207019,"results":"50","hashOfConfig":"34"},{"size":4254,"mtime":1620701474746,"results":"51","hashOfConfig":"34"},{"size":4367,"mtime":1620701538431,"results":"52","hashOfConfig":"34"},{"size":10881,"mtime":1620701394389,"results":"53","hashOfConfig":"34"},{"size":146,"mtime":1617205194331,"results":"54","hashOfConfig":"34"},{"size":1171,"mtime":1617673193105,"results":"55","hashOfConfig":"34"},{"size":11022,"mtime":1620701643641,"results":"56","hashOfConfig":"34"},{"size":14333,"mtime":1620701644285,"results":"57","hashOfConfig":"34"},{"size":155,"mtime":1619191314177,"results":"58","hashOfConfig":"34"},{"size":12007,"mtime":1620701644260,"results":"59","hashOfConfig":"34"},{"size":5687,"mtime":1620701643771,"results":"60","hashOfConfig":"34"},{"size":9285,"mtime":1620701644124,"results":"61","hashOfConfig":"34"},{"size":1000,"mtime":1619802371332,"results":"62","hashOfConfig":"34"},{"size":1069,"mtime":1620393974212,"results":"63","hashOfConfig":"34"},{"size":3575,"mtime":1620393974234,"results":"64","hashOfConfig":"34"},{"size":1000,"mtime":1620701206112,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"8aj3nr",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\index.js",[],["139","140"],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\App.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Layout.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\searchpage.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileLayout.js",["141","142"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TextField, Grid, Button, Modal } from '@material-ui/core';\r\nimport { Save, Cancel } from '@material-ui/icons';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\r\nimport { MenuItem, InputLabel, FormControl, Select } from '@material-ui/core';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\n\r\nimport PersonalInformationForm from './EmployeeProfileComponents/PersonalInformationForm';\r\nimport AddressForm from './EmployeeProfileComponents/AddressForm';\r\nimport ContactForm from './EmployeeProfileComponents/ContactForm';\r\nimport OfficialInformationForm from './EmployeeProfileComponents/OfficialInformationForm';\r\nimport Notification from './Notification';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        flexGrow: 1,\r\n    }, \r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 200,\r\n  },\r\n  \r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  \r\n   careerButton: {\r\n     marginLeft: '20px,'\r\n   },\r\n\r\n   modal: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  },\r\n\r\n  icon:{\r\n    cursor: 'pointer'\r\n  }, \r\n\r\n  inputMaterial:{\r\n    width: '100%'\r\n  }\r\n\r\n}));\r\n\r\nexport default function EmployeeProfileLayout(props) {\r\n  const classes = useStyles();\r\n  const params = useParams();\r\n  const [employeeInfo, setEmployeeInfo] = useState({});\r\n  const [employeeAddress, setEmployeeAddress] = useState();  \r\n  const [open, setOpen] = useState(false);\r\n  const [regions, setRegions] = useState();\r\n  const [countries, setCountries] = useState();\r\n  const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' });\r\n  const [modalDelete, setModalDelete] = useState(false);\r\n  const [modalEdit, setModalEdit] = useState(false);\r\n\r\n  const [newAddress, setNewAddress] = useState({\r\n    lot: '',\r\n    street: '',\r\n    area: '',\r\n    village: '',\r\n    region: '',\r\n    country: '',\r\n  })\r\n\r\n  const [rowSelected, setRowSelected] = useState({\r\n    id: '',\r\n    lot:'',\r\n    street: '',\r\n    area: '',\r\n    village: '',\r\n    regionId: '',\r\n    countryId: '',\r\n    employeeId: '',\r\n  })\r\n\r\n  const initialValues = {\r\n    lot: '',\r\n    street: '',\r\n    area: '',\r\n    village: '',\r\n    region: '',\r\n    country: '',\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    lot: Yup.string()\r\n    .required(\"Lot is Required\"),\r\n    street: Yup.string()\r\n      .required(\"Street is Required\"),\r\n    area: Yup.string()\r\n      .required(\"Area is Required\"),\r\n    village: Yup.string()\r\n      .required(\"Village is Required\"),\r\n    region: Yup.number()\r\n      .required(\"Region is Required\"),\r\n    country: Yup.number()\r\n      .required(\"Country is Required\"),\r\n  });\r\n\r\n  const onSubmitHandler = (values, action) => {\r\n    console.log(values);\r\n    action.resetForm();\r\n  }\r\n\r\n  const handleNewAddressChange = e => {\r\n    const {name, value} = e.target;\r\n    setNewAddress(prevState=>({\r\n      ...prevState,\r\n      [name]: value\r\n    }))\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const {name, value} = e.target;\r\n    setRowSelected(prevState=>({\r\n      ...prevState,\r\n      [name]: value\r\n    }))\r\n  }\r\n\r\n  const deleteRequest = async() => {\r\n    await Axios.delete('DeleteInfo/DeleteAddress/' + rowSelected.id)\r\n    .then(response=>{\r\n      setEmployeeAddress(employeeAddress.filter(row => row.id !== rowSelected.id));\r\n      openCloseModalDelete();\r\n\r\n      if(response.status === 204){\r\n        setNotify({\r\n          isOpen: true,\r\n          message: 'Address Successfully Deleted',\r\n          type: 'success'\r\n        })\r\n      }\r\n      else{\r\n        setNotify({\r\n          isOpen: true,\r\n          message: 'An error occurred',\r\n          type: 'error'\r\n        })\r\n      }\r\n    })    \r\n  }\r\n\r\n  const putRequest = async() => {\r\n    let editedAddress = {\r\n      id: rowSelected.id,\r\n      lot: rowSelected.lot,\r\n      street: rowSelected.street,\r\n      area: rowSelected.area,\r\n      village: rowSelected.village,\r\n      regionId: rowSelected.regionId,\r\n      countryId: rowSelected.countryId,\r\n      employeeId: rowSelected.eId,\r\n    }\r\n    await Axios.patch('UpdateInfo/update/employeePI/address/' + editedAddress.id, editedAddress)\r\n    .then(response=>{\r\n      let newData = employeeAddress;\r\n      newData.map(row => {        \r\n        if(rowSelected.id === row.id){\r\n          row.id = editedAddress.id;\r\n          row.lot = editedAddress.lot;\r\n          row.street = editedAddress.street;\r\n          row.area = editedAddress.area;\r\n          row.village = editedAddress.village;\r\n          row.regionId = editedAddress.regionId;\r\n          row.countryId = editedAddress.countryId;\r\n          row.employeeId = editedAddress.employeeId;\r\n        }\r\n      })      \r\n      setEmployeeAddress(newData);\r\n      openCloseModalEdit();\r\n      if(response.status === 204){\r\n        setNotify({\r\n          isOpen: true,\r\n          message: 'Address Successfully Saved',\r\n          type: 'success'\r\n        })\r\n      }\r\n      else{\r\n        setNotify({\r\n          isOpen: true,\r\n          message: 'An error occurred',\r\n          type: 'error'\r\n        })\r\n      }\r\n    })\r\n  }\r\n \r\n  const openCloseModalDelete = () => {\r\n    setModalDelete(!modalDelete);\r\n  }\r\n\r\n  const openCloseModalEdit = () => {\r\n    setModalEdit(!modalEdit);\r\n  }\r\n\r\n  const selectRow = (row, option) => {\r\n    setRowSelected(row);\r\n    (option === 'Edit') ? openCloseModalEdit() : openCloseModalDelete()\r\n  }\r\n  \r\n  const bodyDelete = (\r\n    <div className={classes.modal}>\r\n      <p>Are you sure you want to delete this address?</p>\r\n      <div align=\"right\">\r\n        <Button color=\"secondary\" onClick={() => deleteRequest()}>Yes</Button>\r\n        <Button onClick={() => openCloseModalDelete()}>No</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const handleClickOpen = () => {    \r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  const handleSave = () => {\r\n    let Address = {\r\n      lot: newAddress.lot,\r\n      street: newAddress.street,\r\n      area: newAddress.area,\r\n      village: newAddress.village,\r\n      reg: parseInt(newAddress.region, 10),\r\n      ctry: parseInt(newAddress.country, 10),\r\n      eId: empId,\r\n    }\r\n    if(Address){\r\n      Axios.post('PostInfo/AddAnEmployeeAddress', Address)\r\n      .then(response => {\r\n        setEmployeeAddress(employeeAddress.concat(response.data))\r\n\r\n        if(response.status === 200){\r\n          setNotify({\r\n            isOpen: true,\r\n            message: 'Address Successfully Saved',\r\n            type: 'success'\r\n          })\r\n        }\r\n        else{\r\n          setNotify({\r\n            isOpen: true,\r\n            message: 'An error occurred',\r\n            type: 'error'\r\n          })\r\n        }\r\n      })\r\n      .catch(error => console.log(error))      \r\n    }\r\n    setEmployeeAddress([Address, ...employeeAddress]);\r\n    setOpen(false);    \r\n  };\r\n  \r\n  let regNumber = params.regNum;\r\n  let empId;\r\n\r\n  useEffect(() => {\r\n    const getEmpInfo = async () => {\r\n      if(regNumber){\r\n        const info = await Axios.get(\"GetInfo/RegimentNumber/\" + regNumber);    \r\n        setEmployeeInfo(info.data);        \r\n      }\r\n    };\r\n\r\n    const getEmpAddress = async () => {\r\n      if(employeeInfo.id){\r\n        const addressInfo = await Axios.get(\"EmployeeInfo/GetEmployeeAddressByTheirId?employeeId=\" + employeeInfo.id);\r\n        setEmployeeAddress(addressInfo.data);\r\n      }\r\n    };\r\n\r\n    const getRegions = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllRegions\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setRegions(info.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    const getCountries = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllCountries\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setCountries(info.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    getEmpInfo();\r\n    getEmpAddress();\r\n    getRegions();\r\n    getCountries();\r\n  }, [regNumber, employeeInfo.id]);\r\n\r\n  empId = employeeInfo.id;\r\n\r\n  const bodyEdit = () => {\r\n    if(regions != null && countries != null){\r\n      if(regions.length > 0 && countries.length > 0){\r\n        return(\r\n          <div className={classes.modal}>\r\n            <h3>Edit Employee Address</h3>\r\n            {/* <TextField name=\"lot\" className={classes.inputMaterial} label=\"Lot\" onChange={handleChange} value={rowSelected && rowSelected.lot}/>\r\n            <br />\r\n            <TextField name=\"street\" className={classes.inputMaterial} label=\"Street\" onChange={handleChange} value={rowSelected && rowSelected.street}/>\r\n            <br />\r\n            <TextField name=\"area\" className={classes.inputMaterial} label=\"Area\" onChange={handleChange} value={rowSelected && rowSelected.area}/>\r\n            <br />\r\n            <TextField name=\"village\" className={classes.inputMaterial} label=\"Village\" onChange={handleChange} value={rowSelected && rowSelected.village}/>\r\n            <br />\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"region-label\">Region</InputLabel>\r\n              <Select\r\n                labelId=\"region-label\"\r\n                id=\"region\"\r\n                name=\"regionId\"\r\n                value={rowSelected && rowSelected.regionId}\r\n                onChange={handleChange}\r\n                label=\"Region\"\r\n              >\r\n                <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                {regions.map((region) =>\r\n                  <MenuItem key={region.id} value={region.id}>{region.name}</MenuItem>\r\n                )}\r\n              </Select>\r\n            </FormControl>\r\n            <br />\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"region-label\">Country</InputLabel>\r\n              <Select\r\n                labelId=\"country-label\"\r\n                id=\"country\"\r\n                name=\"countryId\"\r\n                value={rowSelected && rowSelected.countryId}\r\n                onChange={handleChange}\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                {countries.map((country) =>\r\n                  <MenuItem key={country.id} value={country.id}>{country.name}</MenuItem>\r\n                )}                          \r\n              </Select>\r\n            </FormControl> */}\r\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmitHandler}>\r\n              {(props) => (\r\n                <Form>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                      <Field as={TextField} \r\n                        required\r\n                        name='lot' \r\n                        label='Lot' \r\n                        size=\"small\"\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        error={props.errors.lot && props.touched.lot}\r\n                        helperText={<ErrorMessage name='lot' />} \r\n                      />\r\n                    </Grid>\r\n                  </div>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                    <Field as={TextField} \r\n                        required\r\n                        name='street' \r\n                        label='Street' \r\n                        size=\"small\"\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        error={props.errors.street && props.touched.street}\r\n                        helperText={<ErrorMessage name='street' />} \r\n                      />\r\n                    </Grid>\r\n                  </div>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                      <Field as={TextField} \r\n                        required\r\n                        name='area' \r\n                        label='Area' \r\n                        size=\"small\"\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        error={props.errors.area && props.touched.area}\r\n                        helperText={<ErrorMessage name='area' />} \r\n                      />\r\n                    </Grid >\r\n                  </div>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                      <Field as={TextField} \r\n                        required\r\n                        name='village' \r\n                        label='Village' \r\n                        size=\"small\"\r\n                        variant='outlined'\r\n                        fullWidth\r\n                        error={props.errors.village && props.touched.village}\r\n                        helperText={<ErrorMessage name='village' />} \r\n                      />\r\n                    </Grid >\r\n                  </div>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                      <Field as={TextField} \r\n                        select\r\n                        name='region' \r\n                        label='Region' \r\n                        fullWidth\r\n                        variant='outlined'\r\n                        error={props.errors.region && props.touched.region}\r\n                        helperText={<ErrorMessage name='region' />} \r\n                        required \r\n                      >\r\n                        <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                        {regions.map((region) =>\r\n                          <MenuItem key={region.id} value={region.id}>{region.name}</MenuItem>\r\n                        )}\r\n                      </Field>\r\n                    </Grid >\r\n                  </div>\r\n                  <div>\r\n                    <Grid item xs={2}>\r\n                      <Field as={TextField} \r\n                        select\r\n                        name='country' \r\n                        label='Country' \r\n                        fullWidth\r\n                        variant='outlined'\r\n                        error={props.errors.country && props.touched.country}\r\n                        helperText={<ErrorMessage name='country' />} \r\n                        required \r\n                      >\r\n                        <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                        {countries.map((country) =>\r\n                          <MenuItem key={country.id} value={country.id}>{country.name}</MenuItem>\r\n                        )}\r\n                      </Field>\r\n                    </Grid >\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n            <br /><br />\r\n            <div align=\"right\">\r\n              <Button color=\"primary\" onClick={()=>putRequest()}>Save</Button>\r\n              <Button onClick={() => openCloseModalEdit()}>Cancel</Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const showInfo = () => {\r\n    if(regions != null && countries != null){\r\n      if(regions.length > 0 && countries.length > 0){\r\n        return (\r\n          <div className={classes.root}>\r\n            <Grid container spacing={1} >\r\n              <Grid item xs={6}>\r\n              <h1>Employee Profile Page</h1>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <h1>\r\n                  <Dialog open={open} onClose={handleCancel} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">Add Employee Address</DialogTitle>\r\n                    <DialogContent>\r\n                      <TextField margin=\"dense\" id=\"lot\" name=\"lot\" label=\"Lot\" type=\"text\" variant=\"outlined\" fullWidth value={newAddress.lot} onChange={handleNewAddressChange}/>\r\n                      <TextField margin=\"dense\" id=\"street\" name=\"street\" label=\"Street\" type=\"text\" variant=\"outlined\" fullWidth value={newAddress.street} onChange={handleNewAddressChange}/>\r\n                      <TextField margin=\"dense\" id=\"area\" name=\"area\" label=\"Area\" type=\"text\" variant=\"outlined\" fullWidth value={newAddress.area} onChange={handleNewAddressChange}/>\r\n                      <TextField margin=\"dense\" id=\"village\" name=\"village\" label=\"Village\" type=\"text\" variant=\"outlined\" fullWidth value={newAddress.village} onChange={handleNewAddressChange}/>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" id=\"region-label\">Region</InputLabel>\r\n                        <Select\r\n                          labelId=\"region-label\"\r\n                          id=\"region\"\r\n                          name=\"region\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          defaultValue= ''\r\n                          value={newAddress.region}\r\n                          onChange={handleNewAddressChange}\r\n                          label=\"Region\"\r\n                        >\r\n                          <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                          {regions.map((region) =>\r\n                            <MenuItem key={region.id} value={region.id}>{region.name}</MenuItem>\r\n                          )}\r\n                        </Select>\r\n                      </FormControl>\r\n                      <br />\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" id=\"region-label\">Country</InputLabel>\r\n                        <Select\r\n                          labelId=\"country-label\"\r\n                          id=\"country\"\r\n                          name=\"country\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          defaultValue= ''\r\n                          value={newAddress.country}\r\n                          onChange={handleNewAddressChange}\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                          {countries.map((country) =>\r\n                            <MenuItem key={country.id} value={country.id}>{country.name}</MenuItem>\r\n                          )}                          \r\n                        </Select>\r\n                      </FormControl>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                      <Button onClick={handleCancel} variant=\"contained\" color=\"primary\" startIcon={<Cancel />}>Cancel</Button>\r\n                      <Button onClick={handleSave} variant=\"contained\" color=\"primary\" startIcon={<Save />}>Save Address</Button>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n                  <Button variant=\"outlined\" color=\"primary\">\r\n                    <Link to={'/update-employee/' + empId}>Update Employee Record</Link>\r\n                  </Button>\r\n                  <Button variant=\"outlined\" color=\"primary\">\r\n                    <Link to={'/employee-history-view/' + empId}>View Career History</Link>\r\n                  </Button>\r\n                </h1>\r\n              </Grid>\r\n              <Grid container item xs={12} spacing={3}>\r\n                <div>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <PersonalInformationForm employeeInfo={employeeInfo}></PersonalInformationForm>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <AddressForm \r\n                        employeeInfo={employeeAddress}\r\n                        selectRow={selectRow}>\r\n                      </AddressForm>\r\n                    </Grid>\r\n                    <Button variant=\"outlined\" color=\"primary\" size=\"small\" onClick={handleClickOpen}>\r\n                      Add Address\r\n                    </Button>\r\n                    <Grid item xs={12}>\r\n                      <ContactForm employeeInfo={employeeInfo}></ContactForm>\r\n                    </Grid >\r\n                    <Grid item xs={12}>\r\n                      <OfficialInformationForm employeeInfo={employeeInfo}></OfficialInformationForm>\r\n                    </Grid >\r\n                  </Grid>           \r\n                </div> \r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return(\r\n    <div>\r\n      {showInfo()}\r\n      <Modal open={modalDelete} onClose={openCloseModalDelete}>\r\n        {bodyDelete}\r\n      </Modal>\r\n\r\n      <Modal open={modalEdit} onClose={openCloseModalEdit}>\r\n        {bodyEdit()}        \r\n      </Modal>\r\n      <Notification notify={notify} setNotify={setNotify}/>\r\n    </div>\r\n  );\r\n}\r\n","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryLayout.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchByOtherCriteriaForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchByRegimentNumberForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\SearchPageComponents\\SearchResultsTable.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\PersonalInformationForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\AddressForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\ContactForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\EmployeeProfileComponents\\OfficialInformationForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\CareerHistoryTable.js",["143","144","145","146","147","148","149","150"],"import React, { useState, useEffect } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport moment from 'moment';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport Axios from 'axios'; \r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport {Formik,Form,Field, ErrorMessage} from 'formik';\r\nimport * as Yup  from 'yup';\r\n\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 200,\r\n  },\r\n\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function CareerHistoryTable(props) {\r\n\r\n  const classes = useStyles();\r\n  const [open,setOpen] = useState(false);\r\n  const [startDate, setStartDate] = useState();\r\n  const [endDate, setEndDate] = useState();\r\n  const [newPosition, setNewPosition] = useState();\r\n  const [newDepartment, setNewDepartment] = useState();\r\n  const [positions, setPositions] = useState();\r\n  const [departments, setDepartments] = useState();\r\n  const [rowId, setRowId] = useState();\r\n  const [eId, setEId] = useState();\r\n  \r\n\r\n  let data = props.data;\r\n  //console.log(data);\r\n\r\n  useEffect(() => {    \r\n    const getPosition = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllPositions\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setPositions(info.data);\r\n        }\r\n      }\r\n    };\r\n   \r\n    const getDepartment = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllDepartments\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setDepartments(info.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    getPosition();\r\n    getDepartment();\r\n  }, []);\r\n\r\n  const handlePositionChange = (event) => {\r\n    setNewPosition(event.target.value);\r\n  }\r\n \r\n  const handleDepartmentChange = (event) => {\r\n    setNewDepartment(event.target.value);\r\n  }\r\n\r\n  const handleStartDateChange = (event) => {\r\n    setStartDate(event.target.value);\r\n  }\r\n\r\n  const handleEndDateChange = (event) => {\r\n    setEndDate(event.target.value);\r\n  }\r\n\r\n  const selectRow = (row)=> {\r\n    let i;\r\n    setStartDate(row.startDate);\r\n    setEndDate(row.endDate);\r\n\r\n    \r\n    departments.map((department) => {\r\n      if( row.department == department.name){\r\n       // console.log(row.department + ' vs ' + department.name + ' and ' + department.id)\r\n        setNewDepartment(department.id);\r\n      }\r\n      console.log(newDepartment);\r\n    }\r\n    )\r\n\r\n    positions.map((position) => {\r\n      if( row.position == position.name){\r\n       // console.log(row.department + ' vs ' + department.name + ' and ' + department.id)\r\n        setNewPosition(position.id);\r\n      }\r\n     // console.log(newDepartment);\r\n    }\r\n    )\r\n\r\n    //setNewPosition(row.position);\r\n    //setNewDepartment(row.department);\r\n    setRowId(row.id);\r\n    setEId(row.eId);\r\n    setOpen(true);\r\n    console.log(row.position);\r\n    console.log('newPosition ' + newPosition)\r\n  }\r\n  const initialValues = {\r\n    newPosition: newPosition\r\n    \r\n}\r\n\r\n\r\n\r\n  const handleClickOpen = () => {    \r\n    setOpen(true);\r\n    console.log(open);\r\n  };\r\n  \r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    let careerHistory = {\r\n      id: rowId,\r\n      employeeId: parseInt(eId),\r\n      positionId: newPosition,\r\n      departmentId: newDepartment,\r\n      startDate: startDate,\r\n      endDate: endDate\r\n    }\r\n    if(careerHistory){\r\n\r\n      const patchRequest = async() => {\r\n      Axios.patch('UpdateInfo/update/employeeCH/' + eId, careerHistory)\r\n     // .then(response => (data = data.concat(response.data)))\r\n      .catch(error => console.log(error)) \r\n    }\r\n\r\n    patchRequest();\r\n  }\r\n   // setEmpData([careerHistory, ...empData]);\r\n   \r\n    setOpen(false);    \r\n  };\r\n  const showResults = () => {\r\n    if(data!= null) {\r\n      if(data.length > 0) {  \r\n        return (\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">Position</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">Department</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">End Date</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">Action</StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {data.map((row) => {            \r\n                  return(\r\n                    <StyledTableRow key={row.id}>\r\n                      <StyledTableCell align=\"center\">{row.position}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{row.department}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{moment(row.startDate).format('DD-MM-YYYY')}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{moment(row.endDate).format('DD-MM-YYYY')}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">\r\n                            <Edit className={classes.icon} onClick={() => selectRow(row)}/>\r\n                          </StyledTableCell>   \r\n                    </StyledTableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const showDialog = () => {\r\n    const validationSchema = Yup.object().shape({\r\n      newPosition: Yup.string().required(\"Required\")\r\n    })\r\n    console.log(\"working\");\r\n    if(positions != null && departments != null) {\r\n      if(positions.length > 0 && departments.length > 0){\r\n        return(\r\n          <div className={classes.root}>\r\n          <Grid container spacing={3}>\r\n            <Grid container item xs={12} spacing={3}>\r\n              <React.Fragment>\r\n                 <Dialog open={open} onClose={handleCancel} aria-labelledby=\"form-dialog-title\">\r\n\r\n                    <DialogTitle id=\"form-dialog-title\">Edit Career History Record</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                    <Formik initialValues={initialValues} validationSchema={validationSchema}>\r\n                        {(props)=>(\r\n                           <Form>\r\n                          <FormControl className={classes.formControl}>\r\n                          <InputLabel shrink=\"true\" id=\"position-label\">Position</InputLabel>\r\n                          <Select\r\n                            labelId=\"position-label\"\r\n                            id=\"position\"\r\n                            value={newPosition}\r\n                            onChange={handlePositionChange}\r\n                            label=\"Position\"\r\n                            fullwidth\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            error={props.errors.newPosition && props.touched.newPosition}\r\n                            helperText={<ErrorMessage newPosition='newPosition' />} required\r\n                          >\r\n                            <MenuItem  value=\"\"><em>Select</em></MenuItem>\r\n                            {positions.map((position) =>\r\n                              <MenuItem key={position.id} value={position.id}>{position.name}</MenuItem>)}  \r\n                          </Select>\r\n                        </FormControl>\r\n                       <br/> \r\n                     \r\n                      <FormControl className={classes.formControl}>\r\n                      <InputLabel shrink=\"true\" id=\"department-label\">Department</InputLabel>\r\n                      <Select\r\n                            labelId=\"department-label\"\r\n                            id=\"department\"\r\n                            value={newDepartment}\r\n                            onChange={handleDepartmentChange}\r\n                            label=\"Department\"\r\n                            fullwidth\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            \r\n                          >\r\n                           <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                              {departments.map((department) =>\r\n                              <MenuItem key={department.id} value={department.id}>{department.name}</MenuItem>  \r\n                            )}                         \r\n                          </Select>\r\n                              </FormControl> \r\n                         <br/>\r\n                        <FormControl className={classes.formControl}>\r\n                          <InputLabel shrink=\"true\" htmlFor=\"component-simple\">Start Date</InputLabel>\r\n                          <TextField margin=\"normal\" id=\"startDate\"  type=\"date\" fullWidth variant=\"outlined\" value={moment(startDate).format('YYYY-MM-DD')} onChange={handleStartDateChange}/>\r\n                        </FormControl>\r\n                       <br/>\r\n                        <FormControl className={classes.formControl}>\r\n                          <InputLabel shrink=\"true\" htmlFor=\"component-simple\">End Date</InputLabel>\r\n                          <TextField margin=\"normal\" id=\"EndDate\"  type=\"date\" format=\"dd-MM-yyyy\" fullWidth variant=\"outlined\" value={moment(endDate).format('YYYY-MM-DD')} onChange={handleEndDateChange}/>\r\n                        </FormControl> \r\n                        </Form>\r\n                        )}\r\n                     \r\n                    </Formik>\r\n\r\n                      \r\n                    </DialogContent>\r\n                  \r\n                    <DialogActions>\r\n                    <div>\r\n                      <Button onClick={handleCancel} variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                    </div>\r\n                    <div>\r\n                      <Button onClick={handleSave} variant=\"contained\" color=\"primary\" startIcon={<SaveIcon />}>Save Address</Button>\r\n                    </div>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n                </React.Fragment>\r\n               </Grid>\r\n              </Grid>\r\n             </div>  \r\n        )\r\n      }  \r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {showResults()}\r\n      {showDialog()}\r\n    </div>\r\n  );\r\n}\r\n","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\CareerHistoryForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeInformation.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeAddressForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeContactForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeeOfficialInfoForm.js",["151"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        flexGrow: 1,\r\n    },\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n\r\n  paragraphColor: {\r\n    color: 'red'\r\n  }\r\n}));\r\n\r\nexport default function AddEmployeeOfficialInfoForm(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1}>\r\n      <h3>Official Information</h3>\r\n        <Grid container item xs={12} spacing={3}>\r\n          <React.Fragment>\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  required\r\n                  name='regimentNumber'\r\n                  label='Regimental Number'\r\n                  size=\"small\"\r\n                  variant='outlined'\r\n                  value={props.formik.values.regimentNumber}\r\n                  onChange={props.formik.handleChange}\r\n                  error={Boolean(props.formik.errors.regimentNumber && props.formik.touched.regimentNumber)}\r\n                  helperText={props.formik.errors.regimentNumber && props.formik.touched.regimentNumber && String(props.formik.errors.regimentNumber)}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  required\r\n                  name='nationalIdNumber'\r\n                  label='National ID Number'\r\n                  size=\"small\"\r\n                  variant='outlined'\r\n                  value={props.formik.values.nationalIdNumber}\r\n                  onChange={props.formik.handleChange}\r\n                  error={Boolean(props.formik.errors.nationalIdNumber && props.formik.touched.nationalIdNumber)}\r\n                  helperText={props.formik.errors.nationalIdNumber && props.formik.touched.nationalIdNumber && String(props.formik.errors.nationalIdNumber)}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  required\r\n                  name='passportNumber'\r\n                  label='Passport Number'\r\n                  size=\"small\"\r\n                  variant='outlined'\r\n                  value={props.formik.values.passportNumber}\r\n                  onChange={props.formik.handleChange}\r\n                  error={Boolean(props.formik.errors.passportNumber && props.formik.touched.passportNumber)}\r\n                  helperText={props.formik.errors.passportNumber && props.formik.touched.passportNumber && String(props.formik.errors.passportNumber)}\r\n                />\r\n              </Grid >\r\n\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  required\r\n                  name='passportExpirationDate'\r\n                  label='Passport Expiration Date'\r\n                  size=\"small\"\r\n                  variant='outlined'\r\n                  value={props.formik.values.passportExpirationDate}\r\n                  onChange={props.formik.handleChange}\r\n                  InputLabelProps={{ shrink: true,}}\r\n                  type='date'\r\n                  error={Boolean(props.formik.errors.passportExpirationDate && props.formik.touched.passportExpirationDate)}\r\n                  helpertext={props.formik.errors.passportExpirationDate && props.formik.touched.passportExpirationDate && String(props.formik.errors.passportExpirationDate)}\r\n                />\r\n              </Grid >\r\n\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  required\r\n                  name='tinNumber'\r\n                  label='TIN Number'\r\n                  size=\"small\"\r\n                  variant='outlined'\r\n                  value={props.formik.values.tinNumber}\r\n                  onChange={props.formik.handleChange}\r\n                  error={Boolean(props.formik.errors.tinNumber && props.formik.touched.tinNumber)}\r\n                  helperText={props.formik.errors.tinNumber && props.formik.touched.tinNumber && String(props.formik.errors.tinNumber)}\r\n                />\r\n              </Grid>\r\n            </div>\r\n          </React.Fragment>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\AddEmployeePIForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\AddEmployeeComponents\\axios.js",[],["152","153"],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Home.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\ViewCareerHistory.js",["154"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useParams } from 'react-router-dom';\r\nimport CareerHistoryTable from './CareerHistoryTable';\r\nimport Axios from 'axios'; \r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        flexGrow: 1,\r\n    }, \r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 200,\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function ViewCareerHistory(props) {\r\n  const classes = useStyles();\r\n  const params = useParams();  \r\n  const [empData, setEmpData] = useState();\r\n  const [employeeInfo, setEmployeeInfo] = useState();\r\n  const [newPosition, setNewPosition] = useState();\r\n  const [newDepartment, setNewDepartment] = useState();\r\n  //const [position, setPosition] = useState();\r\n  //const [department, setDepartment] = useState();\r\n  const [startDate, setStartDate] = useState();\r\n  const [endDate, setEndDate] = useState();\r\n  const [open, setOpen] = useState(false);\r\n  const [positions, setPositions] = useState();\r\n  const [departments, setDepartments] = useState();\r\n\r\n  let eId = params.empId;\r\n\r\n  const handleClickOpen = () => {    \r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handlePositionChange = (event) => {\r\n    setNewPosition(event.target.value);\r\n  }\r\n \r\n  const handleDepartmentChange = (event) => {\r\n    setNewDepartment(event.target.value);\r\n  }\r\n\r\n  const handleStartDateChange = (event) => {\r\n    setStartDate(event.target.value);\r\n  }\r\n\r\n  const handleEndDateChange = (event) => {\r\n    setEndDate(event.target.value);\r\n  }\r\n\r\n  const handleSave = () => {\r\n    let careerHistory = {\r\n      eId: parseInt(eId),\r\n      posId: newPosition,\r\n      deptId: newDepartment,\r\n      startDate: startDate,\r\n      endDate: endDate\r\n    }\r\n    if(careerHistory){\r\n\r\n      const postRequest = async() => {\r\n        Axios.post('PostInfo/AddAnEmployeeCareerHistory', careerHistory)\r\n        .then(response => setEmpData(empData.concat(response.data)))\r\n        .catch(error => console.log(error))\r\n      }\r\n\r\n      postRequest();\r\n    }\r\n   \r\n    setOpen(false);    \r\n  };\r\n\r\n  useEffect(() => {    \r\n    const getEmpCH = async () => {\r\n      if(eId){\r\n        const info = await Axios.get(\"EmployeeInfo/GetEmployeeCareerHistoryByTheirId?employeeId=\" + eId);\r\n        setEmpData(info.data);\r\n      }\r\n    };\r\n\r\n    const getEmpInfo = async () => {\r\n      if(eId){\r\n        const info = await Axios.get(\"EmployeeInfo/Id/\" + eId);\r\n        setEmployeeInfo(info.data);\r\n      }\r\n    };  \r\n\r\n    const getPosition = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllPositions\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setPositions(info.data);\r\n        }\r\n      }\r\n    };\r\n   \r\n    const getDepartment = async () => {\r\n      const info = await Axios.get(\"GetInfo/GetAllDepartments\");\r\n      if(info.data != null){\r\n        if(info.data.length > 0){\r\n          setDepartments(info.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    getEmpCH();\r\n    getEmpInfo();\r\n    getPosition();\r\n    getDepartment();\r\n  }, [eId]);\r\n\r\n  const showInfo = () => {\r\n    if(employeeInfo != null) {\r\n      return(\r\n        <div>\r\n         <h2>Career History for {employeeInfo.firstName} {employeeInfo.lastName} ({employeeInfo.regimentNumber})</h2>  \r\n        </div>\r\n      );\r\n    }\r\n  } \r\n\r\n  const showDialog = () => {\r\n    console.log(\"working\");\r\n    if(positions != null && departments != null) {\r\n      if(positions.length > 0 && departments.length > 0){\r\n        return(\r\n          <div className={classes.root}>\r\n          <Grid container spacing={3}>\r\n            <Grid container item xs={12} spacing={3}>\r\n              <React.Fragment>\r\n                 <Dialog open={open} onClose={handleCancel} aria-labelledby=\"form-dialog-title\">\r\n\r\n                    <DialogTitle id=\"form-dialog-title\">Add Career History Record</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" id=\"position-label\">Position</InputLabel>\r\n                        <Select\r\n                          labelId=\"position-label\"\r\n                          id=\"position\"\r\n                          value={newPosition}\r\n                          onChange={handlePositionChange}\r\n                          label=\"Position\"\r\n                          fullwidth\r\n                          variant=\"outlined\"\r\n                          margin=\"normal\"\r\n                        >\r\n                          <MenuItem  value=\"\"><em>Select</em></MenuItem>\r\n                          {positions.map((position) =>\r\n                            <MenuItem key={position.id} value={position.id}>{position.name}</MenuItem>)}  \r\n                        </Select>\r\n                      </FormControl>\r\n                     <br/>\r\n                      {/* <TextField margin=\"dense\" id=\"country\" label=\"Country\" type=\"text\" fullWidth/> */}\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" id=\"department-label\">Department</InputLabel>\r\n                        <Select\r\n                          labelId=\"department-label\"\r\n                          id=\"department\"\r\n                          value={newDepartment}\r\n                          onChange={handleDepartmentChange}\r\n                          label=\"Department\"\r\n                          fullwidth\r\n                          variant=\"outlined\"\r\n                          margin=\"normal\"\r\n                        >\r\n                         <MenuItem value=\"\"><em>Select</em></MenuItem>\r\n                            {departments.map((department) =>\r\n                            <MenuItem key={department.id} value={department.id}>{department.name}</MenuItem>  \r\n                          )}                         \r\n                        </Select>\r\n                      </FormControl>\r\n                      <br/>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" htmlFor=\"component-simple\">Start Date</InputLabel>\r\n                        <TextField margin=\"normal\" id=\"startDate\"  type=\"date\" fullWidth variant=\"outlined\" value={startDate} onChange={handleStartDateChange}/>\r\n                      </FormControl>\r\n                     <br/>\r\n                      <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink=\"true\" htmlFor=\"component-simple\">End Date</InputLabel>\r\n                        <TextField margin=\"normal\" id=\"EndDate\"  type=\"date\" fullWidth variant=\"outlined\" value={endDate} onChange={handleEndDateChange}/>\r\n                      </FormControl>\r\n                    \r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                    <div>\r\n                      <Button onClick={handleCancel} variant=\"contained\" color=\"primary\">Cancel</Button>\r\n                    </div>\r\n                    <div>\r\n                      <Button onClick={handleSave} variant=\"contained\" color=\"primary\" startIcon={<SaveIcon />}>Save Address</Button>\r\n                    </div>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n                </React.Fragment>\r\n               </Grid>\r\n              </Grid>\r\n             </div>  \r\n        )}  \r\n    }\r\n  }  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6}>  \r\n          {showInfo()}\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n          <React.Fragment>\r\n            <div>\r\n              <Grid container spacing={3}>    \r\n                <Grid item xs={12}>\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                    Add Career History Record\r\n                    {/* <Link to={'/add-address/' + empId}>Add Employee Address</Link> */}\r\n                  </Button>\r\n                </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <div>\r\n                {showDialog()}\r\n                </div>\r\n              </Grid>\r\n\r\n                </Grid>            \r\n                <Grid item xs={12}>\r\n                   <CareerHistoryTable data={empData}></CareerHistoryTable>  \r\n                </Grid>\r\n           \r\n            </div>\r\n          </React.Fragment>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeInformation.js",["155","156"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Axios from 'axios';\r\nimport axios from './UpdateEmployeeComponents/axios'\r\n\r\nimport UpdateEmployeePIForm from './UpdateEmployeeComponents/UpdateEmployeePIForm';\r\n//import UpdateEmployeeAddressForm from './UpdateEmployeeComponents/UpdateEmployeeAddressForm';\r\nimport UpdateEmployeeContactForm from './UpdateEmployeeComponents/UpdateEmployeeContactForm';\r\nimport UpdateEmployeeOfficialInfoForm from './UpdateEmployeeComponents/UpdateEmployeeOfficialInfoForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        flexGrow: 1,\r\n    }, \r\n  },\r\n  \r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  \r\n   careerButton: {\r\n     marginLeft: '20px,'\r\n   }\r\n\r\n}));\r\n\r\nexport default function UpdateEmployeeInformation() {\r\n  const classes = useStyles();  \r\n  const [employeeInfo, setEmployeeInfo] = useState({});\r\n  const [empInfoGet, setEmpInfoGet] = useState({});\r\n  const [employeeAddress, setEmployeeAddress] = useState({});\r\n  const regNumber = 123456;\r\n\r\n  useEffect(() => {\r\n    const getEmpInfo = async () => {\r\n      if(regNumber){\r\n        const info = await Axios.get(\"GetInfo/RegimentNumber/\" + regNumber);    \r\n        setEmpInfoGet(info.data);  \r\n        console.log(info.data);      \r\n      }\r\n    };\r\n    const getEmpAddress = async () => {\r\n      if(regNumber){\r\n        const addressInfo = await Axios.get(\"EmployeeInfo/GetEmployeeAddressByTheirId?employeeId=1\");\r\n        setEmployeeAddress(addressInfo.data);\r\n      }\r\n    };\r\n    getEmpInfo();\r\n    getEmpAddress();\r\n  }, [regNumber]);\r\n\r\n  // AddEmployeePIForm INFORMATION\r\n  const [firstName, setFirstName] = useState();\r\n  const [lastName, setLastName] = useState();\r\n  const [otherName, setOtherName] = useState(\"\");\r\n  const [otherNameTwo, setOtherNameTwo] = useState(\"\");\r\n  const [maritalStatus, setMaritalStatus] = useState(\"\");\r\n  const [religion, setReligion] = useState(\"\");\r\n  const [ethnicity, setEthnicity] = useState(0);\r\n  const [sex, setSex] = useState(\"\");\r\n  const [dateOfBirth, setDateOfBirth] = useState();\r\n  const [nationality, setNationality] = useState(\"\");\r\n\r\n\r\n\r\n  const handleFirstNameChange = (event) => {\r\n    setFirstName(event.target.value);\r\n  };\r\n\r\n  const handleLastNameChange = (event) => {\r\n    setLastName(event.target.value);\r\n  };\r\n\r\n  const handleOtherNameChange = (event) => {\r\n    setOtherName(event.target.value);\r\n  };\r\n\r\n  const handleOtherNameTwoChange = (event) => {\r\n    setOtherNameTwo(event.target.value);\r\n  };\r\n\r\n  const handleMaritalStatusChange = (event) => {\r\n    setMaritalStatus(event.target.value);\r\n  };\r\n\r\n  const handleReligionChange = (event) => {\r\n    setReligion(event.target.value);\r\n  };\r\n\r\n  const handleEthnicityChange = (event) => {\r\n    setEthnicity(event.target.value);\r\n  };\r\n\r\n  // DON'T LAUGH TOO MUCH, YOU MIGHT POP A VEIN\r\n  const handleSexChange = (event) => {\r\n    setSex(event.target.value);\r\n  }\r\n\r\n  const handleDoBChange = (event) => {\r\n    setDateOfBirth(event.target.value);\r\n  }\r\n\r\n  const handleNationalityChange = (event) => {\r\n    setNationality(event.target.value);\r\n  }\r\n\r\n  // AddEmployeeContactForm Information\r\n  const [homeNumber, setHomeNumber] = useState();\r\n  const [cellNumber, setCellNumber] = useState();\r\n  const [workNumber, setWorkNumber] = useState();\r\n  const [email, setEmail] = useState();\r\n\r\n  const handleHomeNumChange = (event) => {      \r\n    setHomeNumber(event.target.value);\r\n  }\r\n\r\n  const handleCellNumChange = (event) => {    \r\n    setCellNumber(event.target.value);\r\n  }\r\n\r\n  const handleWorkNumChange = (event) => {       \r\n    setWorkNumber(event.target.value); \r\n  }\r\n\r\n  const handleEmailChange = (event) => {    \r\n    setEmail(event.target.value);\r\n  }\r\n\r\n  // AddEmployeeOfficialInfoForm Information\r\n  const [regimentNumber, setRegimentNumber] = useState();\r\n  const [nationalIdNumber, setNationalIdNumber] = useState();\r\n  const [passportNumber, setPassportNumber] = useState();\r\n  const [passportExpirationDate, setPassportExpirationDate] = useState();\r\n  const [tinNumber, setTinNumber] = useState();\r\n\r\n  const handleRegNumChange = (event) => {    \r\n    setRegimentNumber(event.target.value);\r\n  }\r\n\r\n  const handleNationalIdNumChange = (event) => {    \r\n    setNationalIdNumber(event.target.value);\r\n  }\r\n\r\n  const handlePassportNumChange = (event) => {    \r\n    setPassportNumber(event.target.value); \r\n  }\r\n\r\n  const handlePassportExpDateChange = (event) => {\r\n    setPassportExpirationDate(event.target.value);\r\n  }\r\n\r\n  const handleTinNumChange = (event) => {\r\n    setTinNumber(event.target.value);\r\n  }\r\n\r\n  const postDataHandler = () => {    \r\n    setEmployeeInfo({\r\n      nationalityId: nationality,\r\n      religionId: religion,\r\n      ethnicityId: ethnicity,\r\n      maritalStatusId: maritalStatus,\r\n      homeNumber: parseInt(homeNumber, 10),\r\n      cellNumber: parseInt(cellNumber, 10),\r\n      workNumber: parseInt(workNumber, 10),\r\n      email: email,\r\n      title: '',\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      otherName: otherName,\r\n      regimentNumber: parseInt(regimentNumber, 10),\r\n      dateOfBirth: dateOfBirth,\r\n      sex: sex,\r\n      nationalIdNumber: parseInt(nationalIdNumber, 10),\r\n      passportNumber: passportNumber,\r\n      passportExpirationDate: passportExpirationDate,\r\n      tinNumber: parseInt(tinNumber, 10),\r\n    });\r\n    //console.log(employeeInfo);\r\n    axios.post('PostInfo/AddAnEmployee', employeeInfo)\r\n      .then(response => console.log(response))\r\n      .catch(error => console.log(error))\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1} >\r\n        <Grid item xs={6}>\r\n         <h1>Update Employee Profile</h1>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <h1>\r\n            <Button variant=\"outlined\" color=\"primary\">\r\n            <Link to={'/employee-history/'}>Update Career History</Link>\r\n            </Button>\r\n          </h1>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n          <div>\r\n            <Grid container spacing={3}>          \r\n              <Grid item xs={12}>\r\n                <UpdateEmployeePIForm \r\n                  firstName={firstName}\r\n                  lastName={lastName}\r\n                  otherName={otherName}\r\n                  otherNameTwo={otherNameTwo}\r\n                  maritalStatus={maritalStatus} \r\n                  religion={religion}\r\n                  ethnicity={ethnicity}\r\n                  sex={sex}\r\n                  dateOfBirth={dateOfBirth}\r\n                  nationality={nationality}\r\n                  handleFirstNameChange={handleFirstNameChange}\r\n                  handleLastNameChange={handleLastNameChange}\r\n                  handleOtherNameChange={handleOtherNameChange}\r\n                  handleOtherNameTwoChange={handleOtherNameTwoChange}\r\n                  handleMaritalStatusChange={handleMaritalStatusChange}\r\n                  handleReligionChange={handleReligionChange}\r\n                  handleEthnicityChange={handleEthnicityChange}\r\n                  handleSexChange={handleSexChange}\r\n                  handleDoBChange={handleDoBChange}\r\n                  handleNationalityChange={handleNationalityChange}>                    \r\n                </UpdateEmployeePIForm>\r\n              </Grid>\r\n\r\n              {/*<Grid item xs={12}>\r\n                <AddEmployeeAddressForm \r\n                  lot={lot}\r\n                  street={street}\r\n                  area={area}\r\n                  village={village}\r\n                  region={region}\r\n                  country={country}\r\n                  handleLotChange={handleLotChange}\r\n                  handleStreetChange={handleStreetChange}\r\n                  handleAreaChange={handleAreaChange}\r\n                  handleVillageChange={handleVillageChange}\r\n                  handleRegionChange={handleRegionChange}\r\n                  handleCountryChange={handleCountryChange}></AddEmployeeAddressForm>\r\n              </Grid>*/}\r\n\r\n              <Grid item xs={12}>\r\n                <UpdateEmployeeContactForm \r\n                  homeNumber={homeNumber}\r\n                  cellNumber={cellNumber}\r\n                  workNumber={workNumber}\r\n                  email={email}\r\n                  handleHomeNumChange={handleHomeNumChange}\r\n                  handleCellNumChange={handleCellNumChange}\r\n                  handleWorkNumChange={handleWorkNumChange}\r\n                  handleEmailChange={handleEmailChange}>\r\n                </UpdateEmployeeContactForm>\r\n              </Grid >\r\n\r\n              <Grid item xs={12}>\r\n                <UpdateEmployeeOfficialInfoForm \r\n                  regimentNumber={regimentNumber}\r\n                  nationalIdNumber={nationalIdNumber}\r\n                  passportNumber={passportNumber}\r\n                  passportExpirationDate={passportExpirationDate}\r\n                  tinNumber={tinNumber}\r\n                  handleRegNumChange={handleRegNumChange}\r\n                  handleNationalIdNumChange={handleNationalIdNumChange}\r\n                  handlePassportNumChange={handlePassportNumChange}\r\n                  handlePassportExpDateChange={handlePassportExpDateChange}\r\n                  handleTinNumChange={handleTinNumChange}>\r\n                </UpdateEmployeeOfficialInfoForm>\r\n              </Grid >\r\n\r\n              <Grid item xs={12}>\r\n                <Button type=\"submit\" onClick={postDataHandler} variant=\"outlined\" color=\"primary\"> Add Employee </Button>\r\n              </Grid >\r\n            </Grid>           \r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\axios.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeePIForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeeContactForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\UpdateEmployeeComponents\\UpdateEmployeeOfficialInfoForm.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\Notification.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Controls\\DialogComponent.js",["157","158","159"],"import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormComponent from './../Controls/FormComponent';\r\n\r\n\r\n\r\n  \r\nexport default function DialogComponent() {\r\n  const [open, setOpen] = React.useState(false);\r\n  \r\n  const handleClickToOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  \r\n  const handleToClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <div stlye={{}}>\r\n      <h4>Add Career History</h4>\r\n      <Button variant=\"outlined\" color=\"primary\" \r\n              onClick={handleClickToOpen}>\r\n        Add Career History\r\n      </Button>\r\n      <Dialog open={open} onClose={handleToClose}>\r\n        \r\n        <DialogContent>\r\n          <FormComponent/>\r\n        </DialogContent>\r\n       \r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Controls\\FormComponent.js",["160","161","162","163","164","165","166"],"import React from 'react';\r\nimport { Grid, Paper, Button, Typography, InputLabel } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst FormComponent = () => {\r\n    const paperStyle = { padding: '0 15px 40px 15px', width: 250, }\r\n    const btnStyle = { marginTop: 10 }\r\n    \r\n    const [value,setValue] = React.useState ('')\r\n   \r\n    const initialValues = {\r\n        rank: '',\r\n        name: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        startDate: '',\r\n        endDate:'' \r\n    }\r\n\r\n   \r\n    const validationSchema = Yup.object().shape({\r\n        rank: Yup.string().required(\"Required\"),\r\n        name: Yup.string().min(3, \"It's too short\").required(\"Required\"),\r\n        \r\n        startDate: Yup.date().required(\"Required\"),\r\n        endDate: Yup.date().required(\"Required\")\r\n    })\r\n    const onSubmit = (values, props) => {\r\n\r\n       console.log(values)\r\n    }\r\n    return (\r\n        <Grid>\r\n            <Paper elevation={0} style={paperStyle}>\r\n                \r\n                <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                    {(props) => (\r\n                        <Form noValidate>\r\n                            {/* <FormControl>\r\n                                <InputLabel>\r\n                                    <Select\r\n                                        labelId='department'\r\n                                        id='department-select'\r\n                                        value={value}\r\n                                    >\r\n                                        <MenuItem value ={'Finance'}>Finance</MenuItem>\r\n                                        <MenuItem value ={'Finance'}>Finance</MenuItem>\r\n                                    </Select>\r\n                                </InputLabel>\r\n                            </FormControl> */}\r\n                            {/* <TextField label='Name' name=\"name\" fullWidth value={props.values.name}\r\n                    onChange={props.handleChange} /> */}\r\n\r\n                            <Field as={TextField} name='name' label='Name' fullWidth variant='outlined'  \r\n                                error={props.errors.name && props.touched.name}\r\n                                helperText={<ErrorMessage name='name' />} required />\r\n                                    \r\n                         \r\n\r\n                            <Field as={TextField} name='startDate' label='Start Date' type='date' fullWidth variant='outlined'\r\n                                error={props.errors.startDate && props.touched.startDate}\r\n                                helperText={<ErrorMessage name='starDate' />} required />\r\n\r\n                            <Field as={TextField} name='endDate' label='End Date' type='date' fullWidth variant='outlined'\r\n                                error={props.errors.endDate && props.touched.endDate}\r\n                                helperText={<ErrorMessage name='endDate' />} required />\r\n\r\n                            <Button type='submit' style={btnStyle} variant='contained'\r\n                                color='primary'>Add Career</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default FormComponent;","C:\\MyStuff\\GDF-HRMS-Project\\GDF-hrms-frontend\\front-end\\gdf-hrms\\src\\components\\CareerHistoryComponents\\Notification.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":133,"column":9,"nodeType":"173","messageId":"174","endLine":133,"endColumn":21},{"ruleId":"175","severity":1,"message":"176","line":178,"column":23,"nodeType":"177","messageId":"178","endLine":178,"endColumn":25},{"ruleId":"171","severity":1,"message":"179","line":16,"column":8,"nodeType":"173","messageId":"174","endLine":16,"endColumn":13},{"ruleId":"171","severity":1,"message":"180","line":28,"column":21,"nodeType":"173","messageId":"174","endLine":28,"endColumn":26},{"ruleId":"171","severity":1,"message":"181","line":124,"column":9,"nodeType":"173","messageId":"174","endLine":124,"endColumn":10},{"ruleId":"175","severity":1,"message":"176","line":129,"column":34,"nodeType":"177","messageId":"178","endLine":129,"endColumn":36},{"ruleId":"182","severity":1,"message":"183","line":130,"column":26,"nodeType":"184","messageId":"185","endLine":130,"endColumn":28},{"ruleId":"175","severity":1,"message":"176","line":138,"column":30,"nodeType":"177","messageId":"178","endLine":138,"endColumn":32},{"ruleId":"182","severity":1,"message":"183","line":139,"column":24,"nodeType":"184","messageId":"185","endLine":139,"endColumn":26},{"ruleId":"171","severity":1,"message":"186","line":162,"column":9,"nodeType":"173","messageId":"174","endLine":162,"endColumn":24},{"ruleId":null,"fatal":true,"severity":2,"message":"187","line":105,"column":13},{"ruleId":"167","replacedBy":"188"},{"ruleId":"169","replacedBy":"189"},{"ruleId":"171","severity":1,"message":"179","line":11,"column":8,"nodeType":"173","messageId":"174","endLine":11,"endColumn":13},{"ruleId":"171","severity":1,"message":"190","line":38,"column":10,"nodeType":"173","messageId":"174","endLine":38,"endColumn":20},{"ruleId":"171","severity":1,"message":"191","line":39,"column":10,"nodeType":"173","messageId":"174","endLine":39,"endColumn":25},{"ruleId":"171","severity":1,"message":"192","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":25},{"ruleId":"171","severity":1,"message":"193","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":19},{"ruleId":"171","severity":1,"message":"194","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":21},{"ruleId":"171","severity":1,"message":"195","line":2,"column":31,"nodeType":"173","messageId":"174","endLine":2,"endColumn":41},{"ruleId":"171","severity":1,"message":"196","line":2,"column":43,"nodeType":"173","messageId":"174","endLine":2,"endColumn":53},{"ruleId":"171","severity":1,"message":"197","line":8,"column":8,"nodeType":"173","messageId":"174","endLine":8,"endColumn":19},{"ruleId":"171","severity":1,"message":"198","line":9,"column":8,"nodeType":"173","messageId":"174","endLine":9,"endColumn":14},{"ruleId":"171","severity":1,"message":"199","line":10,"column":8,"nodeType":"173","messageId":"174","endLine":10,"endColumn":16},{"ruleId":"171","severity":1,"message":"200","line":16,"column":12,"nodeType":"173","messageId":"174","endLine":16,"endColumn":17},{"ruleId":"171","severity":1,"message":"201","line":16,"column":18,"nodeType":"173","messageId":"174","endLine":16,"endColumn":26},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'handleChange' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Input' is defined but never used.","'Field' is defined but never used.","'i' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleClickOpen' is assigned a value but never used.","Parsing error: Expected corresponding JSX closing tag for <React.Fragment>\n\n\u001b[0m \u001b[90m 103 | \u001b[39m                \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 104 | \u001b[39m              \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mGrid\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 105 | \u001b[39m            \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 106 | \u001b[39m          \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mFragment\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 107 | \u001b[39m        \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mGrid\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 108 | \u001b[39m      \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mGrid\u001b[39m\u001b[33m>\u001b[39m\u001b[0m",["202"],["203"],"'empInfoGet' is assigned a value but never used.","'employeeAddress' is assigned a value but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'DialogActions' is defined but never used.","'Typography' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]